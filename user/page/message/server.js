// Import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
const express = require('express');
const { GoogleGenerativeAI } = require('@google/generative-ai');
require('dotenv').config(); // ƒê·ªÉ ƒë·ªçc file .env
const cors = require('cors');
const mysql = require('mysql2/promise'); // Import mysql2 v·ªõi ch·∫ø ƒë·ªô promise ƒë·ªÉ d√πng async/await

// Kh·ªüi t·∫°o ·ª©ng d·ª•ng Express
const app = express();

// C·∫•u h√¨nh CORS ƒë·ªÉ cho ph√©p frontend truy c·∫≠p
// ƒê·∫£m b·∫£o 'http://localhost:8080' kh·ªõp v·ªõi URL frontend c·ªßa b·∫°n
app.use(cors({ origin: 'http://localhost:8080' }));
app.use(express.json()); // Cho ph√©p server ƒë·ªçc JSON t·ª´ request body

// C·∫•u h√¨nh k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
const dbConfig = {
    host: process.env.DB_HOST,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_DATABASE,
};

let connection; // Bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu

// H√†m ƒë·ªÉ k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu
async function connectToDatabase() {
    try {
        connection = await mysql.createConnection(dbConfig);
        console.log('ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng t·ªõi c∆° s·ªü d·ªØ li·ªáu MySQL!');
    } catch (err) {
        console.error('L·ªói khi k·∫øt n·ªëi t·ªõi c∆° s·ªü d·ªØ li·ªáu:', err.message);
    }
}

connectToDatabase();

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

async function queryProducts(searchTerm, maxPrice = null, requestedSize = null) {
    if (!connection) {
        console.error('Ch∆∞a c√≥ k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra l·ªói k·∫øt n·ªëi DB.');
        return [];
    }
    try {
        let query = 'SELECT pid, title, price, stock, description, size, size2, size3 FROM product WHERE title LIKE ?';
        const params = [`%${searchTerm}%`];

        if (maxPrice !== null && !isNaN(maxPrice)) {
            query += ' AND price <= ?';
            params.push(maxPrice);
        }

        if (requestedSize !== null && requestedSize.trim() !== '') {
            query += ' AND (size = ? OR size2 = ? OR size3 = ?)';
            params.push(requestedSize.toUpperCase(), requestedSize.toUpperCase(), requestedSize.toUpperCase());
        }

        query += ' LIMIT 5';

        console.log('Debug: SQL Query:', query);
        console.log('Debug: SQL Params:', params);

        const [rows] = await connection.execute(query, params);
        return rows;
    } catch (error) {
        console.error('L·ªói khi truy v·∫•n s·∫£n ph·∫©m:', error.message);
        return [];
    }
}

app.post('/api/chat', async (req, res) => {
    try {
        const userInput = req.body.message;
        if (!userInput) {
            return res.status(400).json({ error: 'Message is required' });
        }

        const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });

        let dynamicInfo = '';
        let initialPrompt = `
            B·∫°n l√† m·ªôt tr·ª£ l√Ω ·∫£o c·ªßa Kaira Shop, m·ªôt c·ª≠a h√†ng b√°n l·∫ª th·ªùi trang nam v√† n·ªØ.
            H√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa kh√°ch h√†ng m·ªôt c√°ch th√¢n thi·ªán, d·ªÖ m·∫øn, h√†i h∆∞·ªõc v√† ng·∫Øn g·ªçn, c√≥ th·ªÉ th√™m icon cho sinh ƒë·ªông. 
            Th√¥ng tin c·ªßa shop:
            - Ch√≠nh s√°ch ƒë·ªïi tr·∫£: trong 7 ng√†y n·∫øu c√≥ l·ªói t·ª´ nh√† s·∫£n xu·∫•t, c·∫ßn c√≥ video unbox.
            - Ph√≠ ship: 30.000ƒë to√†n qu·ªëc.
            - Th·ªùi gian giao h√†ng: 2-5 ng√†y.
            - Li√™n h·ªá: email contact@kairashop.com ho·∫∑c hotline 0901 234 567.
            - Khuy·∫øn m√£i: Hi·ªán c√≥ voucher freeship v√† gi·∫£m 10% cho ƒë∆°n t·ª´ 300k.
            - ƒê·ªãa ch·ªâ: 123 ƒê∆∞·ªùng L√™ L·ª£i, TP.HCM.
            - N·∫øu kh√°ch h√†ng h·ªèi v·ªÅ gi√° c·ªßa m·ªôt s·∫£n ph·∫©m c·ª• th·ªÉm h√£y nh·ªù kh√°ch h√†ng xem tr√™n website nh√©, v√¨ ƒë√£ c√≥ chi ti·∫øt gi√° c·∫£ tr√™n ƒë√≥.
        `;

        const productKeywordsRegex = [
            /\bs·∫£n ph·∫©m\b/i, /\b√°o\b/i, /\bqu·∫ßn\b/i, /\bƒë·∫ßm\b/i, /\bv√°y\b/i,
            /\bm·∫´u\b/i, /\bm·∫∑t h√†ng\b/i, /\bitem\b/i, /\bgi√†y\b/i, /\bph·ª• ki·ªán\b/i
        ];
        const isProductQuery = productKeywordsRegex.some(regex =>
            regex.test(userInput)
        );

        let extractedMaxPrice = null;
        const priceMatch = userInput.match(/(\d{1,3}(?:[\.,]\d{3})*|\d+)\s*(k|ng√†n|ngh√¨n|ƒë)?/i); 
        if (priceMatch && priceMatch[1]) {
            const priceString = priceMatch[1].replace(/[\.,]/g, '');
            extractedMaxPrice = parseInt(priceString, 10);
            if (priceMatch[2] && priceMatch[2].toLowerCase() !== 'ƒë') {
                extractedMaxPrice *= 1000;
            }
            console.log(` Ph√°t hi·ªán gi√° t·ªëi ƒëa: ${extractedMaxPrice} VNƒê`);
        }
        console.log(`Debug: extractedMaxPrice = ${extractedMaxPrice}`);

        let requestedSize = null;
        let protectedInput = userInput.toLowerCase();

        const sizeMatch = protectedInput.match(/\b(?:size|k√≠ch th∆∞·ªõc)?\s*(s|m|l|xl)\b/i);
        if (sizeMatch) {
            requestedSize = sizeMatch[1];
            console.log(`üìè Ph√°t hi·ªán k√≠ch th∆∞·ªõc: "${requestedSize}"`);
            protectedInput = protectedInput.replace(sizeMatch[0], '__SIZE__');
        }

        console.log(`Debug: requestedSize = "${requestedSize}"`);

        const genericQueryPhrasesRegex = [ 
            /\bc√≤n h√†ng kh√¥ng\b/i, /\bc√≥ kh√¥ng\b/i, /\bgi√° bao nhi√™u\b/i,
            /\b(m√¨nh )?t√¨m (ki·∫øm )?\b/i, /\bt√¥i (mu·ªën )?t√¨m\b/i, /\bg·ª£i √Ω (cho m√¨nh )?\b/i,
            /\bc√≥ (s·∫£n ph·∫©m )?n√†o\b/i, /\bmua\b/i, /\bgi·ªõi thi·ªáu\b/i,
            /\bb√°o gi√°\b/i, /\bc√≥ g√¨\b/i, /\bc√≥ th·ªÉ\b/i, /\bl√† g√¨\b/i, /\bh·ªèi v·ªÅ\b/i,
            /\bc·ªßa shop\b/i, /\bc√°c lo·∫°i\b/i, /\bm√¨nh mu·ªën\b/i, /\bv·ªÅ\b/i,
            /\bc√≤n\b/i, /\bkh√¥ng\b/i, /\bnh√©\b/i, /\b·∫°\b/i, /\bm√¨nh\b/i, /\bcho\b/i, 
            /\bl√†m ∆°n\b/i, /\bvui l√≤ng\b/i, /\bxem\b/i, /\bki·ªÉm tra\b/i,
            /\bn·ªØ\b/i, /\bnam\b/i, 
            /\bk√≠ch th∆∞·ªõc\b/i, 
            /\bd∆∞·ªõi\b/i, /\btr√™n\b/i, /\bv·ª´a\b/i, /\bm·∫•y\b/i, /\bb·ªã\b/i, /\bl·ªói\b/i, 
            /\bnh∆∞\b/i, /\bn√†y\b/i, /\bv·∫≠y\b/i, /\bt·ªïng h·ª£p\b/i
        ];

        for (const regex of genericQueryPhrasesRegex) {
            protectedInput = protectedInput.replace(regex, ' ');
        }

        let searchTerm = protectedInput.replace('__SIZE__', '').trim().replace(/\s+/g, ' ');

        if (searchTerm === '' && (isProductQuery || extractedMaxPrice !== null || requestedSize !== null)) {
            searchTerm = 's·∫£n ph·∫©m';
        } else if (searchTerm === '') {
            searchTerm = userInput; 
        }

        console.log(` T·ª´ kh√≥a t√¨m ki·∫øm cu·ªëi c√πng (ƒë√£ l√†m s·∫°ch): "${searchTerm}"`);
        console.log(`Debug: searchTerm tr∆∞·ªõc khi g·ªçi queryProducts = "${searchTerm}"`);

        const products = await queryProducts(searchTerm, extractedMaxPrice, requestedSize);
        console.log('Debug: K·∫øt qu·∫£ s·∫£n ph·∫©m t·ª´ database:', products);

        if (products.length > 0) {
            dynamicInfo += '\n\nTh√¥ng tin chi ti·∫øt c√°c s·∫£n ph·∫©m t√¨m th·∫•y trong c∆° s·ªü d·ªØ li·ªáu:\n';
            products.forEach((p, index) => {
                dynamicInfo += `S·∫£n ph·∫©m ${index + 1}:\n`;
                dynamicInfo += `  - T√™n: ${p.title || 'ƒêang c·∫≠p nh·∫≠t'}\n`;
                if (p.price !== undefined && p.price !== null) {
                    dynamicInfo += `  - Gi√°: ${new Intl.NumberFormat('vi-VN').format(p.price)} VNƒê\n`;
                } else {
                    dynamicInfo += `  - Gi√°: ƒêang c·∫≠p nh·∫≠t\n`;
                }
                if (p.stock !== undefined && p.stock !== null) {
                    dynamicInfo += `  - T·ªìn kho: ${p.stock}\n`;
                } else {
                    dynamicInfo += `  - T·ªìn kho: ƒêang c·∫≠p nh·∫≠t\n`;
                }
                if (p.description) {
                    dynamicInfo += `  - M√¥ t·∫£: ${p.description.substring(0, 200)}${p.description.length > 200 ? '...' : ''}\n`;
                }
                let availableSizes = [];
                if (p.size) availableSizes.push(p.size);
                if (p.size2) availableSizes.push(p.size2);
                if (p.size3) availableSizes.push(p.size3);
                if (availableSizes.length > 0) {
                    dynamicInfo += `  - K√≠ch th∆∞·ªõc c√≥ s·∫µn: ${availableSizes.join(', ')}\n`;
                }
                dynamicInfo += '\n';
            });
            dynamicInfo += '\nD·ª±a v√†o danh s√°ch s·∫£n ph·∫©m tr√™n, h√£y li·ªát k√™ c·ª• th·ªÉ c√°c s·∫£n ph·∫©m t√¨m th·∫•y...';
        } else {
            dynamicInfo += '\n\nKh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o...';
        }

        const finalPrompt = `${initialPrompt}${dynamicInfo}\n\nD·ª±a v√†o nh·ªØng th√¥ng tin tr√™n, h√£y tr·∫£ l·ªùi c√¢u h·ªèi sau c·ªßa kh√°ch h√†ng: "${userInput}"`;

        const result = await model.generateContent(finalPrompt);
        const response = await result.response;
        const text = response.text();

        res.json({ reply: text });

    } catch (error) {
        console.error('L·ªói trong x·ª≠ l√Ω chat:', error.message);
        res.status(500).json({ error: 'C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i.' });
    }
});

const PORT = 3000;
app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});
