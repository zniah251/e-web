// Import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
const express = require('express');
const { GoogleGenerativeAI } = require('@google/generative-ai');
require('dotenv').config(); // ƒê·ªÉ ƒë·ªçc file .env
const cors = require('cors');
const mysql = require('mysql2/promise'); // Import mysql2 v·ªõi ch·∫ø ƒë·ªô promise ƒë·ªÉ d√πng async/await

// Kh·ªüi t·∫°o ·ª©ng d·ª•ng Express
const app = express();

// C·∫•u h√¨nh CORS ƒë·ªÉ cho ph√©p frontend truy c·∫≠p
// ƒê·∫£m b·∫£o 'http://localhost:8080' kh·ªõp v·ªõi URL frontend c·ªßa b·∫°n
app.use(cors({ origin: 'http://localhost:8080' }));
app.use(express.json()); // Cho ph√©p server ƒë·ªçc JSON t·ª´ request body

// C·∫•u h√¨nh k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
const dbConfig = {
    host: process.env.DB_HOST,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_DATABASE,
};

let connection; // Bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu

// H√†m ƒë·ªÉ k·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu
async function connectToDatabase() {
    try {
        connection = await mysql.createConnection(dbConfig);
        console.log('‚úÖ ƒê√£ k·∫øt n·ªëi th√†nh c√¥ng t·ªõi c∆° s·ªü d·ªØ li·ªáu MySQL!');
    } catch (err) {
        console.error('‚ùå L·ªói khi k·∫øt n·ªëi t·ªõi c∆° s·ªü d·ªØ li·ªáu:', err.message);
        // T√πy ch·ªçn: N·∫øu k·∫øt n·ªëi DB l√† b·∫Øt bu·ªôc, b·∫°n c√≥ th·ªÉ c√¢n nh·∫Øc tho√°t ·ª©ng d·ª•ng ho·∫∑c th·ª±c hi·ªán l·∫°i
        // process.exit(1); // Tho√°t ·ª©ng d·ª•ng n·∫øu kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c DB
    }
}

// G·ªçi h√†m k·∫øt n·ªëi khi ·ª©ng d·ª•ng kh·ªüi ƒë·ªông
// ƒê·∫£m b·∫£o k·∫øt n·ªëi ƒë∆∞·ª£c thi·∫øt l·∫≠p tr∆∞·ªõc khi c√°c route b·∫Øt ƒë·∫ßu nh·∫≠n request
connectToDatabase();

// L·∫•y API key t·ª´ file .env
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

/**
 * H√†m truy v·∫•n s·∫£n ph·∫©m t·ª´ c∆° s·ªü d·ªØ li·ªáu.
 * @param {string} searchTerm - T·ª´ kh√≥a t√¨m ki·∫øm s·∫£n ph·∫©m (d√πng cho title).
 * @param {number|null} maxPrice - Gi√° t·ªëi ƒëa c·ªßa s·∫£n ph·∫©m (n·∫øu c√≥).
 * @param {string|null} requestedSize - K√≠ch th∆∞·ªõc s·∫£n ph·∫©m ƒë∆∞·ª£c y√™u c·∫ßu (n·∫øu c√≥).
 * @returns {Array} - M·∫£ng c√°c ƒë·ªëi t∆∞·ª£ng s·∫£n ph·∫©m t√¨m ƒë∆∞·ª£c.
 */
async function queryProducts(searchTerm, maxPrice = null, requestedSize = null) {
    if (!connection) {
        console.error('Ch∆∞a c√≥ k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra l·ªói k·∫øt n·ªëi DB.');
        return [];
    }
    try {
        // S·ª¨ D·ª§NG 'pid' v√† 'title' theo c·∫•u tr√∫c b·∫£ng c·ªßa b·∫°n. LO·∫†I B·ªé 'url' n·∫øu kh√¥ng c√≥.
        let query = 'SELECT pid, title, price, stock, description, size, size2, size3 FROM product WHERE title LIKE ?';
        const params = [`%${searchTerm}%`];

        if (maxPrice !== null && !isNaN(maxPrice)) {
            query += ' AND price <= ?'; // Th√™m ƒëi·ªÅu ki·ªán l·ªçc gi√°
            params.push(maxPrice);
        }

        // TH√äM ƒêI·ªÄU KI·ªÜN L·ªåC THEO K√çCH TH∆Ø·ªöC
        if (requestedSize !== null && requestedSize.trim() !== '') {
            query += ' AND (size = ? OR size2 = ? OR size3 = ?)';
            params.push(requestedSize.toUpperCase(), requestedSize.toUpperCase(), requestedSize.toUpperCase()); // Chuy·ªÉn sang ch·ªØ hoa ƒë·ªÉ kh·ªõp (n·∫øu DB c≈©ng l∆∞u ch·ªØ hoa)
        }

        query += ' LIMIT 5'; // Gi·ªõi h·∫°n 5 k·∫øt qu·∫£

        console.log('Debug: SQL Query:', query); // Log c√¢u truy v·∫•n SQL
        console.log('Debug: SQL Params:', params); // Log c√°c tham s·ªë

        const [rows] = await connection.execute(query, params);
        return rows;
    } catch (error) {
        console.error('‚ùå L·ªói khi truy v·∫•n s·∫£n ph·∫©m:', error.message);
        return [];
    }
}

// T·∫°o m·ªôt "route" ƒë·ªÉ x·ª≠ l√Ω y√™u c·∫ßu chat
app.post('/api/chat', async (req, res) => {
    try {
        const userInput = req.body.message;
        if (!userInput) {
            return res.status(400).json({ error: 'Message is required' });
        }

        const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });

        let dynamicInfo = '';
        let initialPrompt = `
            B·∫°n l√† m·ªôt tr·ª£ l√Ω ·∫£o c·ªßa Kaira Shop, m·ªôt c·ª≠a h√†ng b√°n l·∫ª th·ªùi trang nam v√† n·ªØ.
            H√£y tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa kh√°ch h√†ng m·ªôt c√°ch th√¢n thi·ªán, d·ªÖ m·∫øn, chuy√™n nghi·ªáp v√† ng·∫Øn g·ªçn, c√≥ th·ªÉ th√™m icon cho sinh ƒë·ªông.
            Th√¥ng tin c·ªßa shop:
            - Ch√≠nh s√°ch ƒë·ªïi tr·∫£: trong 7 ng√†y n·∫øu c√≥ l·ªói t·ª´ nh√† s·∫£n xu·∫•t, c·∫ßn c√≥ video unbox.
            - Ph√≠ ship: 30.000ƒë to√†n qu·ªëc.
            - Th·ªùi gian giao h√†ng: 2-5 ng√†y.
            - Li√™n h·ªá: email contact@kairashop.com ho·∫∑c hotline 0901 234 567.
            - Khuy·∫øn m√£i: Hi·ªán c√≥ voucher freeship v√† gi·∫£m 10% cho ƒë∆°n t·ª´ 300k.
            - ƒê·ªãa ch·ªâ: 123 ƒê∆∞·ªùng L√™ L·ª£i, TP.HCM.
        `;

        const productKeywordsRegex = [
            /\bs·∫£n ph·∫©m\b/i, /\b√°o\b/i, /\bqu·∫ßn\b/i, /\bƒë·∫ßm\b/i, /\bv√°y\b/i,
            /\bm·∫´u\b/i, /\bm·∫∑t h√†ng\b/i, /\bitem\b/i, /\bgi√†y\b/i, /\bph·ª• ki·ªán\b/i
        ];
        const isProductQuery = productKeywordsRegex.some(regex =>
            regex.test(userInput)
        );

        let extractedMaxPrice = null;
        const priceMatch = userInput.match(/(\d{1,3}(?:[\.,]\d{3})*|\d+)\s*(k|ng√†n|ngh√¨n|ƒë)?/i); 
        if (priceMatch && priceMatch[1]) {
            const priceString = priceMatch[1].replace(/[\.,]/g, '');
            extractedMaxPrice = parseInt(priceString, 10);
            if (priceMatch[2] && priceMatch[2].toLowerCase() !== 'ƒë') {
                extractedMaxPrice *= 1000;
            }
            console.log(`üí∞ Ph√°t hi·ªán gi√° t·ªëi ƒëa: ${extractedMaxPrice} VNƒê`);
        }
        console.log(`Debug: extractedMaxPrice = ${extractedMaxPrice}`);

        let requestedSize = null;
        const sizeMatch = userInput.match(/\bsize\s*([a-zA-Z0-9]+)\b|\b([smlxl]{1,3})\b/i);
        if (sizeMatch) {
            requestedSize = sizeMatch[1] || sizeMatch[2]; 
            console.log(`üìè Ph√°t hi·ªán k√≠ch th∆∞·ªõc: "${requestedSize}"`);
        }
        console.log(`Debug: requestedSize = "${requestedSize}"`);

        // DANH S√ÅCH C√ÅC C·ª§M T·ª™ H·ªéI TH√îNG TH∆Ø·ªúNG C·∫¶N LO·∫†I B·ªé KH·ªéI SEARCHTERM
        const commonQuestionPhrasesRegex = [
            /\bc√≤n h√†ng kh√¥ng\b/i, /\bc√≥ kh√¥ng\b/i, /\bgi√° bao nhi√™u\b/i,
            /\b(m√¨nh )?t√¨m (ki·∫øm )?\b/i, /\bt√¥i (mu·ªën )?t√¨m\b/i, /\bg·ª£i √Ω (cho m√¨nh )?\b/i,
            /\bc√≥ (s·∫£n ph·∫©m )?n√†o\b/i, /\b(c√≤n )?size\b/i, /\b(size )?[smlxl]{1,3}\b/i, // Lo·∫°i b·ªè k√≠ch th∆∞·ªõc ƒë√£ tr√≠ch xu·∫•t
            /\d{1,3}(?:[\.,]\d{3})*\s*(k|ng√†n|ngh√¨n|ƒë)?/i, // Lo·∫°i b·ªè gi√° ƒë√£ tr√≠ch xu·∫•t
            /\bmua\b/i, /\bgi·ªõi thi·ªáu\b/i
        ];


        // K√≠ch ho·∫°t truy v·∫•n s·∫£n ph·∫©m n·∫øu c√≥ t·ª´ kh√≥a s·∫£n ph·∫©m, gi√° ho·∫∑c k√≠ch th∆∞·ªõc
        if (isProductQuery || extractedMaxPrice !== null || requestedSize !== null) {
            let tempUserInput = userInput.toLowerCase(); 

            // B∆∞·ªõc 1: Lo·∫°i b·ªè gi√° v√† k√≠ch th∆∞·ªõc ƒë√£ tr√≠ch xu·∫•t
            tempUserInput = tempUserInput.replace(/(\d{1,3}(?:[\.,]\d{3})*|\d+)\s*(k|ng√†n|ngh√¨n|ƒë)?/i, '').trim();
            tempUserInput = tempUserInput.replace(/\bsize\s*([a-zA-Z0-9]+)\b|\b([smlxl]{1,3})\b/i, '').trim();

            // B∆∞·ªõc 2: Lo·∫°i b·ªè c√°c t·ª´ kh√≥a s·∫£n ph·∫©m chung
            for (const regex of productKeywordsRegex) {
                tempUserInput = tempUserInput.replace(regex, '').trim();
            }

            // B∆∞·ªõc 3: Lo·∫°i b·ªè c√°c c·ª•m t·ª´ h·ªèi th√¥ng th∆∞·ªùng
            for (const regex of commonQuestionPhrasesRegex) {
                tempUserInput = tempUserInput.replace(regex, '').trim();
            }

            let searchTerm = tempUserInput;
            searchTerm = searchTerm.replace(/\s+/g, ' ').trim(); // Chu·∫©n h√≥a kho·∫£ng tr·∫Øng


            // B∆∞·ªõc 4: ƒê·∫∑t searchTerm d·ª± ph√≤ng n·∫øu qu√° tr·ªëng r·ªóng
            if (searchTerm === '' || ['g√¨', 'n√†o', 'c√≥', 'd∆∞·ªõi', 'bao nhi√™u'].includes(searchTerm)) {
                if (!isProductQuery && extractedMaxPrice === null && requestedSize === null) {
                    searchTerm = userInput; // D√πng input g·ªëc n·∫øu kh√¥ng c√≥ t·ª´ kh√≥a SP, gi√°, hay size ƒë·ªÉ Gemini t·ª± x·ª≠ l√Ω
                } else {
                    searchTerm = 's·∫£n ph·∫©m'; // N·∫øu c√≥ b·∫•t k·ª≥ ƒëi·ªÅu ki·ªán n√†o (SP, gi√°, size), d√πng 's·∫£n ph·∫©m' l√†m t·ª´ kh√≥a d·ª± ph√≤ng
                }
            }
            console.log(`üîç T·ª´ kh√≥a t√¨m ki·∫øm cu·ªëi c√πng: "${searchTerm}"`);
            console.log(`Debug: searchTerm tr∆∞·ªõc khi g·ªçi queryProducts = "${searchTerm}"`);

            // TRUY·ªÄN C·∫¢ GI√Å V√Ä K√çCH TH∆Ø·ªöC V√ÄO H√ÄM TRUY V·∫§N
            const products = await queryProducts(searchTerm, extractedMaxPrice, requestedSize); 
            console.log('Debug: K·∫øt qu·∫£ s·∫£n ph·∫©m t·ª´ database:', products);

            if (products.length > 0) {
                dynamicInfo += '\n\nTh√¥ng tin chi ti·∫øt c√°c s·∫£n ph·∫©m t√¨m th·∫•y trong c∆° s·ªü d·ªØ li·ªáu:\n';
                products.forEach((p, index) => {
                    dynamicInfo += `S·∫£n ph·∫©m ${index + 1}:\n`;
                    dynamicInfo += `  - T√™n: ${p.title || 'ƒêang c·∫≠p nh·∫≠t'}\n`;
                    if (p.price !== undefined && p.price !== null) {
                        dynamicInfo += `  - Gi√°: ${new Intl.NumberFormat('vi-VN').format(p.price)} VNƒê\n`;
                    } else {
                        dynamicInfo += `  - Gi√°: ƒêang c·∫≠p nh·∫≠t\n`;
                    }
                    if (p.stock !== undefined && p.stock !== null) {
                        dynamicInfo += `  - T·ªìn kho: ${p.stock}\n`;
                    } else {
                        dynamicInfo += `  - T·ªìn kho: ƒêang c·∫≠p nh·∫≠t\n`;
                    }
                    console.log(`Debug: Stock c·ªßa ${p.title}: ${p.stock}`);

                    if (p.description) {
                        dynamicInfo += `  - M√¥ t·∫£: ${p.description.substring(0, 200)}${p.description.length > 200 ? '...' : ''}\n`;
                    }
                    let availableSizes = [];
                    if (p.size) availableSizes.push(p.size);
                    if (p.size2) availableSizes.push(p.size2);
                    if (p.size3) availableSizes.push(p.size3);
                    if (availableSizes.length > 0) {
                        dynamicInfo += `  - K√≠ch th∆∞·ªõc c√≥ s·∫µn: ${availableSizes.join(', ')}\n`;
                    }
                    
                    dynamicInfo += '\n';
                });
                dynamicInfo += '\nD·ª±a v√†o danh s√°ch s·∫£n ph·∫©m tr√™n, h√£y li·ªát k√™ c·ª• th·ªÉ c√°c s·∫£n ph·∫©m t√¨m th·∫•y (n·∫øu c√≥), bao g·ªìm t√™n, gi√°, v√† n·∫øu c√≥ th·ªÉ, m·ªôt m√¥ t·∫£ ng·∫Øn. ƒê·∫∑c bi·ªát, h√£y nh·∫•n m·∫°nh t√¨nh tr·∫°ng t·ªìn kho v√† c√°c k√≠ch th∆∞·ªõc c√≥ s·∫µn. N·∫øu c√≥ nhi·ªÅu h∆°n 3 s·∫£n ph·∫©m, b·∫°n c√≥ th·ªÉ ch·ªçn l·ªçc nh·ªØng s·∫£n ph·∫©m ph√π h·ª£p nh·∫•t. H·∫°n ch·∫ø g·ª£i √Ω kh√°ch h√†ng truy c·∫≠p website n·∫øu ƒë√£ c√≥ ƒë·ªß th√¥ng tin li·ªát k√™. S·ª≠ d·ª•ng c√°c emoji ph√π h·ª£p. V√≠ d·ª•: "Ch√†o b·∫°n! üòç Kaira Shop c√≥ c√°c m·∫´u ƒë·∫ßm n·ªØ size S sau:\n- ƒê·∫ßm Maxi H·ªça Ti·∫øt (149.000ƒë): C√≤n 10 s·∫£n ph·∫©m. Ki·ªÉu d√°ng nh·∫π nh√†ng.\n- ƒê·∫ßm Su√¥ng Basic (120.000ƒë): C√≤n 20 s·∫£n ph·∫©m. ƒê∆°n gi·∫£n, d·ªÖ ph·ªëi ƒë·ªì.\n"\n';
            } else {
                dynamicInfo += '\n\nKh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o trong c∆° s·ªü d·ªØ li·ªáu theo y√™u c·∫ßu c·ªßa kh√°ch h√†ng, ƒë·∫∑c bi·ªát l√† v·ªõi c√°c ti√™u ch√≠ t√¨m ki·∫øm (t√™n, gi√°, k√≠ch th∆∞·ªõc). H√£y th√¥ng b√°o nh·∫π nh√†ng v√† g·ª£i √Ω kh√°ch h√†ng th·ª≠ t√¨m ki·∫øm v·ªõi t·ª´ kh√≥a ho·∫∑c m·ª©c gi√°/k√≠ch th∆∞·ªõc kh√°c, ho·∫∑c li√™n h·ªá tr·ª±c ti·∫øp ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt h∆°n. ƒê·ª´ng qu√™n nh·∫Øc v·ªÅ c√°c khuy·∫øn m√£i hi·ªán c√≥! üòâ';
            }
        }

        const finalPrompt = `${initialPrompt}${dynamicInfo}\n\nD·ª±a v√†o nh·ªØng th√¥ng tin tr√™n, h√£y tr·∫£ l·ªùi c√¢u h·ªèi sau c·ªßa kh√°ch h√†ng: "${userInput}"`;

        const result = await model.generateContent(finalPrompt);
        const response = await result.response;
        const text = response.text();

        res.json({ reply: text });

    } catch (error) {
        console.error('‚ùå L·ªói trong x·ª≠ l√Ω chat:', error.message);
        res.status(500).json({ error: 'C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i.' });
    }
});

// Kh·ªüi ƒë·ªông server
const PORT = 3000;
app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
});
