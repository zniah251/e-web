const { getOrderData, getCustomerInfo } = require('./db');
const { generateInvoice } = require('./generateInvoice');
const { sendMailWithInvoice } = require('./sendMail');
const mysql = require('mysql2/promise');

// Function ƒë·ªÉ t·∫°o b·∫£ng log n·∫øu ch∆∞a t·ªìn t·∫°i
async function createInvoiceLogTable() {
  const connection = await mysql.createConnection({
    host: 'localhost',
    user: 'root',
    password: '',
    database: 'e-web'
  });

  try {
    await connection.execute(`
      CREATE TABLE IF NOT EXISTS invoice_sent_log (
        id INT AUTO_INCREMENT PRIMARY KEY,
        order_id INT NOT NULL,
        sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        email VARCHAR(255),
        status ENUM('success', 'failed') DEFAULT 'success',
        error_message TEXT,
        INDEX (order_id)
      )
    `);
    console.log('‚úÖ B·∫£ng invoice_sent_log ƒë√£ ƒë∆∞·ª£c t·∫°o/ki·ªÉm tra');
  } catch (error) {
    console.error('‚ùå L·ªói t·∫°o b·∫£ng invoice_sent_log:', error.message);
  } finally {
    await connection.end();
  }
}

// Function ƒë·ªÉ l·∫•y danh s√°ch ƒë∆°n h√†ng ƒë√£ confirm nh∆∞ng ch∆∞a g·ª≠i email
async function getConfirmedOrders() {
  const connection = await mysql.createConnection({
    host: 'localhost',
    user: 'root',
    password: '',
    database: 'e-web'
  });

  try {
    // ƒê·∫ßu ti√™n t·∫°o b·∫£ng log n·∫øu ch∆∞a c√≥
    await createInvoiceLogTable();

    // L·∫•y c√°c ƒë∆°n h√†ng c√≥ tr·∫°ng th√°i Confirmed
    const [rows] = await connection.execute(`
      SELECT 
        o.oid,
        o.create_at,
        o.destatus,
        o.paystatus,
        u.uname,
        u.email
      FROM orders o
      JOIN users u ON o.uid = u.uid
      WHERE o.destatus = 'Confirmed'
      AND o.oid NOT IN (
        SELECT order_id FROM invoice_sent_log WHERE sent_at IS NOT NULL
      )
      ORDER BY o.create_at DESC
    `);

    return rows;
  } catch (error) {
    console.error('‚ùå L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng confirmed:', error.message);
    return [];
  } finally {
    await connection.end();
  }
}

// Function ƒë·ªÉ ƒë√°nh d·∫•u ƒë√£ g·ª≠i email
async function markInvoiceAsSent(orderId) {
  const connection = await mysql.createConnection({
    host: 'localhost',
    user: 'root',
    password: '',
    database: 'e-web'
  });

  try {
    // Ghi log ƒë√£ g·ª≠i
    await connection.execute(`
      INSERT INTO invoice_sent_log (order_id, email, status)
      SELECT o.oid, u.email, 'success'
      FROM orders o
      JOIN users u ON o.uid = u.uid
      WHERE o.oid = ?
    `, [orderId]);

    console.log(`‚úÖ ƒê√£ ƒë√°nh d·∫•u ƒë∆°n h√†ng #${orderId} ƒë√£ g·ª≠i email`);
  } catch (error) {
    console.error(`‚ùå L·ªói khi ƒë√°nh d·∫•u ƒë∆°n h√†ng #${orderId}:`, error.message);
  } finally {
    await connection.end();
  }
}

// Function ƒë·ªÉ ghi log l·ªói
async function logInvoiceError(orderId, errorMessage) {
  const connection = await mysql.createConnection({
    host: 'localhost',
    user: 'root',
    password: '',
    database: 'e-web'
  });

  try {
    await connection.execute(`
      INSERT INTO invoice_sent_log (order_id, email, status, error_message)
      SELECT o.oid, u.email, 'failed', ?
      FROM orders o
      JOIN users u ON o.uid = u.uid
      WHERE o.oid = ?
    `, [errorMessage, orderId]);
  } catch (error) {
    console.error(`‚ùå L·ªói khi ghi log l·ªói cho ƒë∆°n h√†ng #${orderId}:`, error.message);
  } finally {
    await connection.end();
  }
}

// Function ch√≠nh ƒë·ªÉ x·ª≠ l√Ω t·ª± ƒë·ªông g·ª≠i h√≥a ƒë∆°n
async function processConfirmedOrders() {
  console.log('üîÑ B·∫Øt ƒë·∫ßu ki·ªÉm tra ƒë∆°n h√†ng ƒë√£ confirm...');
  
  try {
    const confirmedOrders = await getConfirmedOrders();
    
    if (confirmedOrders.length === 0) {
      console.log('‚ÑπÔ∏è Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o c·∫ßn g·ª≠i h√≥a ƒë∆°n.');
      console.log('üí° L√Ω do c√≥ th·ªÉ l√†:');
      console.log('   - Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o c√≥ tr·∫°ng th√°i "Confirmed"');
      console.log('   - T·∫•t c·∫£ ƒë∆°n h√†ng confirmed ƒë√£ ƒë∆∞·ª£c g·ª≠i h√≥a ƒë∆°n');
      console.log('   - Ch∆∞a c√≥ ƒë∆°n h√†ng n√†o trong database');
      return;
    }

    console.log(`üìã T√¨m th·∫•y ${confirmedOrders.length} ƒë∆°n h√†ng c·∫ßn g·ª≠i h√≥a ƒë∆°n:`);
    
    for (const order of confirmedOrders) {
      console.log(`\nüì¶ X·ª≠ l√Ω ƒë∆°n h√†ng #${order.oid} - ${order.uname} (${order.email})`);
      
      try {
        // G·ª≠i h√≥a ƒë∆°n
        const result = await handleSendInvoice(order.oid);
        
        if (result) {
          await markInvoiceAsSent(order.oid);
          console.log(`‚úÖ ƒê√£ g·ª≠i h√≥a ƒë∆°n th√†nh c√¥ng cho ƒë∆°n h√†ng #${order.oid}`);
        } else {
          await logInvoiceError(order.oid, 'G·ª≠i email th·∫•t b·∫°i');
          console.log(`‚ùå Kh√¥ng th·ªÉ g·ª≠i h√≥a ƒë∆°n cho ƒë∆°n h√†ng #${order.oid}`);
        }
      } catch (error) {
        await logInvoiceError(order.oid, error.message);
        console.error(`üí• L·ªói x·ª≠ l√Ω ƒë∆°n h√†ng #${order.oid}:`, error.message);
      }
      
      // Delay 2 gi√¢y gi·ªØa c√°c l·∫ßn g·ª≠i ƒë·ªÉ tr√°nh spam
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
    
    console.log('\n‚úÖ Ho√†n th√†nh x·ª≠ l√Ω t·∫•t c·∫£ ƒë∆°n h√†ng confirmed!');
    
  } catch (error) {
    console.error('üí• L·ªói trong qu√° tr√¨nh x·ª≠ l√Ω:', error.message);
  }
}

// Function ƒë·ªÉ g·ª≠i h√≥a ƒë∆°n cho m·ªôt ƒë∆°n h√†ng c·ª• th·ªÉ (t·ª´ file sendInvoice,js)
async function handleSendInvoice(orderId) {
  try {
    if (!orderId || isNaN(orderId)) {
      console.log('‚ùå ID ƒë∆°n h√†ng kh√¥ng h·ª£p l·ªá.');
      return false;
    }

    const customerInfo = await getCustomerInfo(orderId);
    if (!customerInfo) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin kh√°ch h√†ng.');
      return false;
    }

    if (!customerInfo.email || !customerInfo.email.includes('@')) {
      console.log(`‚ùå Email kh√¥ng h·ª£p l·ªá: ${customerInfo.email}`);
      return false;
    }

    const orderData = await getOrderData(orderId);
    if (!orderData || orderData.length === 0) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y chi ti·∫øt ƒë∆°n h√†ng.');
      return false;
    }

    // T·∫°o PDF v·ªõi async/await
    const filePath = await generateInvoice(orderData, orderId);
    console.log(`üìÑ ƒê√£ t·∫°o file PDF: ${filePath}`);
    
    const emailSent = await sendMailWithInvoice(customerInfo.email, orderId, filePath);
    
    return emailSent;
  } catch (error) {
    console.error('‚ö†Ô∏è L·ªói:', error.message);
    return false;
  }
}

// Export c√°c function
module.exports = { 
  processConfirmedOrders, 
  handleSendInvoice,
  getConfirmedOrders,
  markInvoiceAsSent
};

// Ch·∫°y t·ª± ƒë·ªông n·∫øu file ƒë∆∞·ª£c execute tr·ª±c ti·∫øp
if (require.main === module) {
  processConfirmedOrders();
} 