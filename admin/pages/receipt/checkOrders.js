const mysql = require('mysql2/promise');

async function checkOrders() {
  const connection = await mysql.createConnection({
    host: 'localhost',
    user: 'root',
    password: '',
    database: 'e-web'
  });

  try {
    console.log('üîç Ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng trong database...\n');

    // Ki·ªÉm tra t·ªïng s·ªë ƒë∆°n h√†ng
    const [totalOrders] = await connection.execute(`
      SELECT COUNT(*) as total FROM orders
    `);
    console.log(`üìä T·ªïng s·ªë ƒë∆°n h√†ng: ${totalOrders[0].total}`);

    // Ki·ªÉm tra ƒë∆°n h√†ng theo tr·∫°ng th√°i
    const [statusCount] = await connection.execute(`
      SELECT 
        destatus,
        COUNT(*) as count
      FROM orders 
      GROUP BY destatus
      ORDER BY count DESC
    `);

    console.log('\nüìà Ph√¢n b·ªë theo tr·∫°ng th√°i:');
    statusCount.forEach(row => {
      console.log(`   ${row.destatus}: ${row.count} ƒë∆°n h√†ng`);
    });

    // Ki·ªÉm tra ƒë∆°n h√†ng confirmed
    const [confirmedOrders] = await connection.execute(`
      SELECT 
        o.oid,
        o.create_at,
        o.destatus,
        o.paystatus,
        u.uname,
        u.email
      FROM orders o
      JOIN users u ON o.uid = u.uid
      WHERE o.destatus = 'Confirmed'
      ORDER BY o.create_at DESC
      LIMIT 10
    `);

    console.log(`\n‚úÖ ƒê∆°n h√†ng c√≥ tr·∫°ng th√°i "Confirmed" (${confirmedOrders.length} ƒë∆°n):`);
    if (confirmedOrders.length > 0) {
      confirmedOrders.forEach(order => {
        console.log(`   #${order.oid} - ${order.uname} (${order.email}) - ${order.create_at}`);
      });
    } else {
      console.log('   Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o c√≥ tr·∫°ng th√°i "Confirmed"');
    }

    // Ki·ªÉm tra b·∫£ng log
    const [logCount] = await connection.execute(`
      SELECT COUNT(*) as total FROM invoice_sent_log
    `);
    console.log(`\nüìù S·ªë b·∫£n ghi trong invoice_sent_log: ${logCount[0].total}`);

    if (logCount[0].total > 0) {
      const [recentLogs] = await connection.execute(`
        SELECT 
          order_id,
          sent_at,
          status,
          email
        FROM invoice_sent_log
        ORDER BY sent_at DESC
        LIMIT 5
      `);

      console.log('\nüìß 5 b·∫£n ghi g·ª≠i h√≥a ƒë∆°n g·∫ßn nh·∫•t:');
      recentLogs.forEach(log => {
        console.log(`   ƒê∆°n #${log.order_id} - ${log.email} - ${log.status} - ${log.sent_at}`);
      });
    }

    // Ki·ªÉm tra ƒë∆°n h√†ng confirmed ch∆∞a g·ª≠i h√≥a ƒë∆°n
    const [pendingInvoices] = await connection.execute(`
      SELECT 
        o.oid,
        u.uname,
        u.email
      FROM orders o
      JOIN users u ON o.uid = u.uid
      WHERE o.destatus = 'Confirmed'
      AND o.oid NOT IN (
        SELECT order_id FROM invoice_sent_log WHERE sent_at IS NOT NULL
      )
    `);

    console.log(`\nüì¨ ƒê∆°n h√†ng confirmed ch∆∞a g·ª≠i h√≥a ƒë∆°n: ${pendingInvoices.length}`);
    if (pendingInvoices.length > 0) {
      pendingInvoices.forEach(order => {
        console.log(`   #${order.oid} - ${order.uname} (${order.email})`);
      });
    }

  } catch (error) {
    console.error('‚ùå L·ªói khi ki·ªÉm tra:', error.message);
  } finally {
    await connection.end();
  }
}

// Ch·∫°y ki·ªÉm tra
checkOrders(); 